#!/usr/bin/env node

// read json
// save it to NEdb
// request url

var fs = require('fs');
var NeDB = require('nedb');
var Promise = require('es6-promise').Promise;
var request = require('request');
var pace;
var _ = require('lodash');
var sleep = require('sleep');

function log(s) {
	console.log(JSON.stringify(s, null, 4));
}

var argv = require('yargs')
	.usage('Usage: $0 -f [string]')
	.demand(['f'])
	.argv;

// read in json
var json = JSON.parse(fs.readFileSync(argv.f, 'utf8'));

// connect to db
var db = new NeDB({
	filename: argv.f.split('.')[0] + '.db',
	autoload: true // automatic loading
});

// retrieve existing docs
var retrieveDocs = new Promise(function(resolve, reject) {

	// only insert docs if none are found
	db.find({}, function(err, docs) {
		if (docs.length) {
			resolve(docs);
		} else {
			db.remove({}, { multi: true});
			db.insert(json, function(err, newDocs) {
				if (err) {
					reject(Error('It broke'));
				} else {
					resolve(newDocs);
				}
			});
		}
	});

});

// make url request
var requestJson = function(url) {
	return new Promise(function(resolve, reject) {
		request(url, function(error, response, body) {
			console.log(url);
			console.log(response.statusCode);
			if (!error && response.statusCode == 200) {
				resolve(JSON.parse(body));
			} else {
				reject(response.statusCode);
			}
		});
	});
};

var updateDoc = function(doc) {
	return new Promise(function(resolve, reject) {

		var address = _([doc.City, doc.State, doc.Country])
			.filter(function(v) {
				return v;
			})
			.value()
			.join(',+');

		var url = 'https://maps.googleapis.com/maps/api/geocode/json?address=' + address;

		// var url = 'http://api.tiles.mapbox.com/v4/geocode/mapbox.places/' + address + '.json?access_token=pk.eyJ1IjoiZ2FicmllbC1mbG9yaXQiLCJhIjoiVldqX21RVSJ9.Udl7GDHMsMh8EcMpxIr2gA';
		requestJson(url)
			.then(function(json) {
				db.update({_id: doc._id}, {$set: {mapbox: json}}, function(err, inserted) {
					if (err) {
						sleep.usleep(1000000);
						reject(err);
					} else {
						sleep.usleep(1000000);
						pace.op();
						resolve(inserted);
					}
				});
			});
	});
};

retrieveDocs
	.then(function(docs) {

		// log(_(docs)
		// 	.map(function(v, i) {

		// 		var result = {
		// 			State: v.State,
		// 			City: v.City,
		// 			Country: v.Country,
		// 			Runners: v.n,
		// 			Radius: Math.sqrt(v.n/Math.PI)
		// 		};

		// 		if(v.mapbox &&
		// 			v.mapbox.features[0] &&
		// 			v.mapbox.features[0].center) {

		// 			var feature = v.mapbox.features[0];

		// 			var center = feature.center;
		// 			result.lat = center[1];
		// 			result.lng = center[0];
		// 			result.relevance = feature.relevance;
		// 		}

		// 		return result;
		// 	})
		// 	.filter('relevance')
		// 	.sortBy('relevance')
		// 	.value()
		// );

		// tell pace how many docs we're going to process
		pace = require('pace')(docs.length);

		return Promise.all(docs.map(updateDoc));
	});
